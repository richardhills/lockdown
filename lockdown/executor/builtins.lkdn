static var = {
	type: "Inferred"
};

static any = {
	type: "Any"
};

static int = {
	type: "Integer"
};

static bool = {
	type: "Boolean"
};

static string = {
	type: "String"
};

static void = {
	type: "NoValue"
};

static BaseComposite = {
	type: "Universal",
	micro_ops: []
};

static tuple = function(type: any, length: int) {
  return dynamic function(value: type) {
    var opcodes = list(range(0, length)) *|> {
      continue json({
        "opcode": "literal",
        "value": lockdown(value)
      });
    };
    return json({
      "opcode": "template",
      "opcodes": lockdown(opcodes)
    });
  };
};

static Iterable = function(keyType: any, valueType: any) => any {
	return {
		type: "Universal",
		micro_ops: [{
      type: "iter",
      params: [ keyType, valueType ]		
		}]
	};
};

static keys = function(list: Iterable<any, any>) {
	return list *|> {
		continue key;
	};
};

static values = function(list: Iterable<any, any>) {
	return list *|> { continue value; };
};

static valuesG = function(type: any) {
	return dynamic function(list: Iterable<any, prepare.local.type>) => Iterable<any, prepare.local.type> {
		return list *|> { continue value; };
	};
};

static intYielder = Function<> => void, yields int => any;

static list = function(func: intYielder) {
	return for(var v from func) {
		continue v;
	};
};

static range = function(start: int, end: int) => intYielder {
	return function() {
		int i = start;
		while(i < end) {
			yield i;
			i = i + 1;
		};
	};
};

static irange = function() {
	return function() {
		int i = 0;
		loop {
			yield i;
			i = i + 1;
		};
	};
};

static length = function(c: BaseComposite) {
	return json({
		"opcode": "length",
		"composite": lockdown(c)
	});
};

static find = function(
	func: intYielder,
	checker: Function<int> => bool
) => int {
	for(var i from func) {
		if(checker(i)) {
			return i;
		};
	};
	return 0;
};

static sum = function(list: Iterable<any, int>) => int {
  int total = 0;
  list *|> {
    total = total + value;
  };
  return total;
};

static max = function(list: {
  type: "Universal",
  micro_ops: [{
    type: "iter",
    params: [ int, int ]    
  }, {
    type: "get",
    index: 0,
    params: [ 0, int ]
  }]
}) => int {
  int largestValue = list[0];
  list *|> {
    if(argument.value > largestValue) {
      largestValue = argument.value;
    };
  };
  return largestValue;
};

static gcd = function(a: int, b: int) {
  while(b != 0) {
    [ a, b ] = [ b, a % b ];
  };
  return a;
};

static factorial = function(a: int) {
  int result = 1;
  for(var i from range(1, a)) {
    result = result * i;
  };
  return result;
};

export {
	var, any, int, bool, string, void, Iterable, keys, values, valuesG, sum, max, gcd, factorial, list, range, irange, length, find
};
