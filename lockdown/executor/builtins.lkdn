static var = {
	type: "Inferred"
};

static any = {
	type: "Any"
};

static int = {
	type: "Integer"
};

static bool = {
	type: "Boolean"
};

static string = {
	type: "String"
};

static void = {
	type: "NoValue"
};

static BaseComposite = {
	type: "Universal",
	micro_ops: []
};

static Iterable = function(keyType: any, valueType: any) => any {
	return {
		type: "Universal",
		micro_ops: [{
      type: "iter",
      params: [ keyType, valueType ]		
		}]
	};
};

static keys = function(list: Iterable<any, any>) {
	return list *|> {
		continue key;
	};
};

static values = function(type: any) {
	return dynamic function(list: Iterable<any, prepare.local.type>) => Iterable<any, prepare.local.type> {
		return list *|> { continue value; };
	};
};

static Yielder = function(type: any) {
  return Function<> => void, yields type => any;
};

static list = function(type: any) {
  return dynamic function(func: Yielder<prepare.local.type>) {
  	return for(var v from func) {
  		continue v;
  	};
  };
};

static List = function(type: any) {
  var isSparse = false;
  return {
    type: "Universal",
    micro_ops: [{
      type: "get-wildcard",
      params: [ int, type, true ]
    }, {
      type: "iter",
      params: [ int, type ]
    }, {
      type: "set-wildcard",
      params: [ int, type, !isSparse, false ]
    }, {
      type: "remove-wildcard",
      params: [ true, false ]
    }, {
      type: "insert-wildcard",
      params: [ type, !isSparse, false ]
    }, {
      type: "insert-start",
      params: [ type, false ]
    }, {
      type: "insert-end",
      params: [ type, false ]
    }, {
      type: "insert-end",
      params: [ type, false ]
    }]
  };
};

static range = function(start: int, end: int) => Yielder<int> {
	return function() {
		int i = start;
		while(i < end) {
			yield i;
			i = i + 1;
		};
	};
};

static irange = function() {
	return function() {
		int i = 0;
		loop {
			yield i;
			i = i + 1;
		};
	};
};

static length = function(c: BaseComposite) {
	return json({
		"opcode": "length",
		"composite": lockdown(c)
	});
};

static find = function(
	func: Yielder<int>,
	checker: Function<int> => bool
) => int {
	for(var i from func) {
		if(checker(i)) {
			return i;
		};
	};
	return 0;
};

static sum = function(list: Iterable<any, int>) => int {
  int total = 0;
  list *|> {
    total = total + value;
  };
  return total;
};

static max = function(list: {
  type: "Universal",
  micro_ops: [{
    type: "iter",
    params: [ int, int ]    
  }, {
    type: "get",
    index: 0,
    params: [ 0, int ]
  }]
}) => int {
  int largestValue = list[0];
  list *|> {
    if(argument.value > largestValue) {
      largestValue = argument.value;
    };
  };
  return largestValue;
};

static gcd = function(a: int, b: int) {
  while(b != 0) {
    [ a, b ] = [ b, a % b ];
  };
  return a;
};

static factorial = function(a: int) {
  int result = 1;
  for(var i from range(1, a)) {
    result = result * i;
  };
  return result;
};

static tuple = function(type: any, number: int) {
  return json({
    "opcode": "close",
    "outer_context": { "opcode": "context" },
    "function": {
      "opcode": "prepare",
      "code": lockdown({
        "static": {
          opcode: "literal",
          value: {
            argument: {
              type: "Universal",
              micro_ops: [{
                type: "get",
                index: 0,
                params: [ 0, type ]
              }]
            },
            local: { type: "NoValue" },
            outer: { type: "Any" },
            break_types: { "infer-all": [ { "out": { type: "Inferred" } } ] }
          }
        },
        local_initializer: { opcode: "nop" },
        code: {
          opcode: "template",
          opcodes: list<int>(range(0, number)) *|> {
            continue [ {
              opcode: "literal", value: index
            }, {
              opcode: "dereference",
              reference: { opcode: "literal", value: 0 },
              of: {
                opcode: "dereference",
                reference: { opcode: "literal", value: "argument" },
                of: {
                  opcode: "context"
                }
              }
            } ];
          }
        }
      })
    }
  });
};

export {
	var, any, int, bool, string, void, tuple, Iterable, keys, values, sum, max, gcd, factorial, list, List, range, irange, length, find
};
